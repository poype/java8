Class Loader

可使用Class Loader实现程序热部署

每一个ClassLoader，都拥有一个独立的类名称空间。
如果两个类的ClassLoader不同，那这两个类一定不相等。

双亲委派模型
1. 启动类加载器 Bootstrap ClassLoader， 这个类加载器是用C++语言实现的，是JVM自身的一部分。它负责加载<JAVA_HOME>/lib目录下存放的类，例如rt.jar
   除了启动类加载器外，其它所有的类加载器都由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。
2. 扩展类加载器 Extension ClassLoader，它负责加载<JAVA_HOME>/lib/ext目录下存放的类。
3. 应用程序类加载器 Application ClassLoader， 该加载器可以通过ClassLoader类中的getSystemClassLoader()方法获得，所以也叫做系统类加载器。
   该加载器负责加载用户类路径(ClassPath)上所有的类。

ClassLoader继承关系：
Bootstrap ClassLoader -> Extension ClassLoader -> Application ClassLoader -> 自定义类加载器

双亲委派模型工作过程：
如果一个ClassLoader收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成。每一个类加载器都是如此。
因此所有的加载类的请求最终都应该传送到最顶层的Bootstrap ClassLoader。
只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去完成加载。
