假说1：绝大多数对象都是朝生夕灭
假说2：熬过越多次垃圾收集过程的对象就越难以消亡
根据这两个假说，JVM根据对象年龄将堆划分出不同的两大块区域——新生代和老年代，这里的年龄即对象熬过GC的次数。
在新生代(Young Generation)中，每次GC都会有大批对象死去，而每次GC后存活的少量对象，将会逐步晋升到老年代(Old Generation)存放。


Stop World: 当JVM进行垃圾回收时，必须暂停其它所有工作线程，等GC线程执行回收任务结束后，才能恢复工作线程的运行。
从最早的Serial，到后来的ParNew、Parallel、CMS，再到最后的G1，垃圾收集器进化的目标就是为了消除或降低用户线程因垃圾收集而导致的停顿。
随着垃圾收集器的发展，用户线程的停顿时间在不断缩短，但是仍然没有办法彻底消除。


在 G1 收集器出现之前，ParNew与CMS的固定搭配是在服务器模式下最常用的。
但从JDK9开始，ParNew 与 CMS的组合就不再是官方推荐的服务器模式下GC解决方案了，官方希望它能完全被G1所取代。
并且 ParNew 和 CMS必须强绑定，可以理解为ParNew 被融入到了 CMS中，成为为CMS专门处理新生代对象回收的组成部分。

对于CMS收集器，在初始标记和重新标记两个阶段仍然需要Stop World，但这两个阶段占用的时间较短。
CMS收集器采用的是标记清除算法，所以会造成内存不连续，产生很多碎片。
CMS收集器在执行几次GC之后会对内存中的碎片进行合并整理一次，但这样用户线程的停顿时间又变长了。


G1 是一款主要面向服务端应用的垃圾收集器，在JDK9之后，G1成为服务端模式下的默认垃圾收集器。而CMS则被标记成Deprecate。
从G1开始，垃圾收集器的设计思路有了转变，不再追求一次把整个Java堆全部清理干净，而是追求能够应付应用的内存分配速率。
只要内存回收的速度能够跟得上对象分配的速度，那一切就能运作的很完美。

G1 不像之前那些收集器只能回收年轻代或老年代，它可以面向heap中的任何部分进行收集。即G1同时支持新生代和老年代的回收。
G1 把连续的Java堆划分成多个大小相等的独立区域(Region)，每一个Region都可以根据需要扮演新生代的Eden空间、Survivor空间，或老年代空间。
G1收集器可以对扮演不同角色的Region采取不同的策略执行垃圾回收(新生代采用标记-复制，老年代采用标记-整理)。
这样新生代和老年代的区域不再固定了，它们都是一系列Region的动态集合(不需要连续)。
Region是作为一次垃圾回收的最小单元，每次垃圾回收的内存空间都是Region的整数倍。这样G1基于Region的信息就能够预测一次垃圾回收的停顿时间。
用户可以自己指定一次垃圾回收所能容忍的停顿时间，相比于之前的那些垃圾收集器，这是一个很强大的功能。
这就是不再追求一次把整个Java堆全部清理干净，而是追求能够应付应用的内存分配速率。

两个参数
-XX:G1HeapRegionSize  设置每个Region的大小，取值范围是1MB~32MB
-XX:MAXGCPauseMillis  设置允许的收集停顿时间，默认200毫秒

G1运作期间不会产生内存碎片，但需要的额外资源要比CMS高。

大对象是一个坏消息，比遇到大对象更加坏的消息就是遇到一群“短命大对象”，要极力避免。


-verbose:gc
-XX:+UseG1GC
-XX:MAXGCPauseMillis=200
-XX:G1HeapRegionSize=8m
-XX:+ParallelRefProcEnabled
-XX:-ResizePLAB
-XX:PrintGCDetails  打印内存回收日志，并且在进程退出时输出当前内存各区域分配情况
-XX:PrintGCDateStamps
-XX:+PrintClassHistogramAfterFullGC
-XX:+PrintClassHistogramBeforeFullGC
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=/aa/bbb/ccc

图片“堆的结构”，即使是用G1，堆的结构也是如此。即G1也是有年轻代和老年代，年轻代中也是有一个Eden和两个Survivor